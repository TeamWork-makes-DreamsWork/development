swagger: '2.0'
info:
  version: 0.1.0
  title: Jakd Undertow API
consumes:
  - application/x-www-form-urlencoded
produces:
  - application/json

paths:

  /search.json:
    get:
      description: Search `Questions` objects with parameter
      parameters:
      - name: search
        in: query
        description: search term
        required: true
        type: string
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/QuestionBrowse'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'

  /questions.json:
    get:
      description: Gets `Questions` objects.
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/QuestionBrowse'
    post:
      description: Create a new Question
      parameters:
      - name: user_token
        in: header
        description: User Token for authorization
        required: true
        type: string
      - name: title
        in: formData
        type: string
        description: question object to create
        required: true
      - name: description
        in: formData
        type: string
        description: question object to create
        required: true
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Question'
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /questions/{id}.json:
    get:
      description: Show Question
      parameters:
      - name: id
        type: integer
        in: path
        description: ID of question to show
        required: true
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Question'
        '404':
          description: Error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update a Question
      parameters:
      - name: id
        in: path
        description: ID of question to update
        required: true
        type: integer
      - name: user_token
        in: header
        description: User Token for authorization
        required: true
        type: string
      - name: accepted_answer_id
        in: formData
        type: integer
        description: Accepted Answer ID
        required: false
      - name: title
        in: formData
        type: string
        description: Title of Question
        required: false
      - name: description
        in: formData
        type: string
        description: Description of Question
        required: false
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Question'
        '403':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /answers.json:
    post:
      description: Create a new Answer
      parameters:
      - name: user_token
        in: header
        description: User Token for authorization
        required: true
        type: string
      - name: answer_text
        in: formData
        type: string
        description: question object to create
        required: true
      - name: question_id
        in: formData
        type: integer
        description: question object to create
        required: true
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Answer'
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /answers/{answer_id}.json:
    get:
      description: Show an answer
      parameters:
      - name: answer_id
        in: path
        description: Answer ID to show
        required: true
        type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Answer'
        '404':
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /users.json:
    post:
      description: Create a new user
      parameters:
      - name: display_name
        in: formData
        type: string
        description: Display Name of the user. Must be unique.
        required: true
      - name: email
        in: formData
        type: string
        description: Email address of the user. Must be unique.
        required: true
      - name: full_name
        in: formData
        type: string
        description: Full name of the user
        required: true
      - name: password
        in: formData
        type: string
        description: Password for the user. Minimum 8 characters.
        required: true
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/FullAnswer'
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /users/{user_id}.json:
    get:
      description: Show a user
      parameters:
      - name: user_id
        in: path
        description: User ID
        required: true
        type: integer
      - name: user_token
        in: header
        description: User Token for authorization
        type: string
        required: true
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FullUser'
    put:
      description: Update a user
      parameters:
      - name: user_id
        in: path
        description: User ID
        required: true
        type: integer
      - name: user_token
        in: header
        description: User Token for authorization
        type: string
        required: true
      - name: display_name
        in: formData
        type: string
        description: Display Name of the user. Must be unique.
        required: false
      - name: email
        in: formData
        type: string
        description: Email address of the user. Must be unique.
        required: false
      - name: full_name
        in: formData
        type: string
        description: Full name of the user
        required: false
      - name: password
        in: formData
        type: string
        description: Password for the user. Minimum 8 characters.
        required: false
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FullUser'
    delete:
      description: Delete a user
      parameters:
      - name: user_id
        in: path
        description: User ID
        required: true
        type: integer
      - name: user_token
        in: header
        description: User's token for authorization
        required: true
        type: string
      responses:
        '200':
          description: Success
        '403':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /login.json:
    post:
      description: Create a new user
      parameters:
      - name: email
        in: formData
        type: string
        description: Email address of the user
        required: true
      - name: password
        in: formData
        type: string
        description: Password for the user
        required: true
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FullUser'
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /logout.json:
    delete:
      description: Logout a user
      parameters:
      - name: user_token
        in: header
        description: User's token for authorization
        required: true
        type: string
      responses:
        '200':
          description: Success
        '404':
          description: Error
          schema:
            $ref: '#/definitions/Error'

definitions:

  Error:
    properties:
      code:
        type: integer
      message:
        type: string

  User:
    properties:
      user_id:
        type: integer
      display_name:
        type: string
      email:
        type: string
      full_name:
        type: string
      user_meows:
        type: integer
      profile_url:
        type: string

  FullUser:
    properties:
      user_id:
        type: integer
      token:
        type: string
      display_name:
        type: string
      email:
        type: string
      full_name:
        type: string
      questions_asked:
        type: integer
      answers_given:
        type: integer
      meows_total:
        type: integer
      meows_questions:
        type: integer
      meows_answers:
        type: integer
      created_at:
        type: string
        format: date-time
      profile_url:
        type: string

  Question:
    properties:
      question_id:
        type: integer
      user:
        type: object
        $ref: '#/definitions/User'
      title:
        type: string
      description:
        type: string
      created_at:
        type: string
        format: date-time
      question_meows:
        type: integer
      answers:
        type: array
        items:
          $ref: '#/definitions/Answer'

  QuestionBrowse:
    properties:
      question_id:
        type: integer
      user:
        type: object
        $ref: '#/definitions/User'
      title:
        type: string
      description:
        type: string
      created_at:
        type: string
        format: date-time
      question_meows:
        type: integer
      answers_count:
        type: integer


  Answer:
    properties:
      answer_id:
        type: integer
      accepted:
        type: boolean
      answer_text:
        type: string
      answered_at:
        type: string
        format: date-time
      answer_meows:
        type: integer
      user:
        type: object
        $ref: '#/definitions/User'

  FullAnswer:
    properties:
      answer_id:
        type: integer
      question_id:
        type: integer
      accepted:
        type: boolean
      answer_text:
        type: string
      answered_at:
        type: string
        format: date-time
      answer_meows:
        type: integer
      user:
        type: object
        $ref: '#/definitions/User'
